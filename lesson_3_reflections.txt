1. When would you want to use a remote repository rather than keeping all your work local?

    If you're collaborating with others. It also serves as a backup for your code.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	If you're working on an experimental feature that could conflict with new commits. 

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forking clones a repository on github that you can administrate. Cloning makes a copy of a repository locally from 
	either a local or remote source. Branches are collections of connected commits. 

4. What is the benefit of having a copy of the last known state of the remote stored locally?

	You can work offline, it saves a lot of data overhead when pushing changes to github and it gives the possibility to do a quick check which changes are made in the online repo compared to the offline repository.

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I would probably assign a specific function for each member to work on. Only allowing 1 function to be handled at a time.
	That way, there are no conflicting merges etc. It would be harder to combine all the final work.

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	When you want to make changes that won't affect the main production product just yet. This has the benefit of 
	being able to experiment freely without any fear of breaking the main application. Making changes directly on master
	has the benefit of being easier to manage. 